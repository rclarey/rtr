import { Router } from "../mod.ts";

const routes = [
  "/:a/b/c/d/e/f/g/h",
  "/a/:b/c/d/e/f/g/h",
  "/:a/:b/c/d/e/f/g/h",
  "/a/b/:c/d/e/f/g/h",
  "/:a/b/:c/d/e/f/g/h",
  "/a/:b/:c/d/e/f/g/h",
  "/:a/:b/:c/d/e/f/g/h",
  "/a/b/c/:d/e/f/g/h",
  "/:a/b/c/:d/e/f/g/h",
  "/a/:b/c/:d/e/f/g/h",
  "/:a/:b/c/:d/e/f/g/h",
  "/a/b/:c/:d/e/f/g/h",
  "/:a/b/:c/:d/e/f/g/h",
  "/a/:b/:c/:d/e/f/g/h",
  "/:a/:b/:c/:d/e/f/g/h",
  "/a/b/c/d/:e/f/g/h",
  "/:a/b/c/d/:e/f/g/h",
  "/a/:b/c/d/:e/f/g/h",
  "/:a/:b/c/d/:e/f/g/h",
  "/a/b/:c/d/:e/f/g/h",
  "/:a/b/:c/d/:e/f/g/h",
  "/a/:b/:c/d/:e/f/g/h",
  "/:a/:b/:c/d/:e/f/g/h",
  "/a/b/c/:d/:e/f/g/h",
  "/:a/b/c/:d/:e/f/g/h",
  "/a/:b/c/:d/:e/f/g/h",
  "/:a/:b/c/:d/:e/f/g/h",
  "/a/b/:c/:d/:e/f/g/h",
  "/:a/b/:c/:d/:e/f/g/h",
  "/a/:b/:c/:d/:e/f/g/h",
  "/:a/:b/:c/:d/:e/f/g/h",
  "/a/b/c/d/e/:f/g/h",
  "/:a/b/c/d/e/:f/g/h",
  "/a/:b/c/d/e/:f/g/h",
  "/:a/:b/c/d/e/:f/g/h",
  "/a/b/:c/d/e/:f/g/h",
  "/:a/b/:c/d/e/:f/g/h",
  "/a/:b/:c/d/e/:f/g/h",
  "/:a/:b/:c/d/e/:f/g/h",
  "/a/b/c/:d/e/:f/g/h",
  "/:a/b/c/:d/e/:f/g/h",
  "/a/:b/c/:d/e/:f/g/h",
  "/:a/:b/c/:d/e/:f/g/h",
  "/a/b/:c/:d/e/:f/g/h",
  "/:a/b/:c/:d/e/:f/g/h",
  "/a/:b/:c/:d/e/:f/g/h",
  "/:a/:b/:c/:d/e/:f/g/h",
  "/a/b/c/d/:e/:f/g/h",
  "/:a/b/c/d/:e/:f/g/h",
  "/a/:b/c/d/:e/:f/g/h",
  "/:a/:b/c/d/:e/:f/g/h",
  "/a/b/:c/d/:e/:f/g/h",
  "/:a/b/:c/d/:e/:f/g/h",
  "/a/:b/:c/d/:e/:f/g/h",
  "/:a/:b/:c/d/:e/:f/g/h",
  "/a/b/c/:d/:e/:f/g/h",
  "/:a/b/c/:d/:e/:f/g/h",
  "/a/:b/c/:d/:e/:f/g/h",
  "/:a/:b/c/:d/:e/:f/g/h",
  "/a/b/:c/:d/:e/:f/g/h",
  "/:a/b/:c/:d/:e/:f/g/h",
  "/a/:b/:c/:d/:e/:f/g/h",
  "/:a/:b/:c/:d/:e/:f/g/h",
  "/a/b/c/d/e/f/:g/h",
  "/:a/b/c/d/e/f/:g/h",
  "/a/:b/c/d/e/f/:g/h",
  "/:a/:b/c/d/e/f/:g/h",
  "/a/b/:c/d/e/f/:g/h",
  "/:a/b/:c/d/e/f/:g/h",
  "/a/:b/:c/d/e/f/:g/h",
  "/:a/:b/:c/d/e/f/:g/h",
  "/a/b/c/:d/e/f/:g/h",
  "/:a/b/c/:d/e/f/:g/h",
  "/a/:b/c/:d/e/f/:g/h",
  "/:a/:b/c/:d/e/f/:g/h",
  "/a/b/:c/:d/e/f/:g/h",
  "/:a/b/:c/:d/e/f/:g/h",
  "/a/:b/:c/:d/e/f/:g/h",
  "/:a/:b/:c/:d/e/f/:g/h",
  "/a/b/c/d/:e/f/:g/h",
  "/:a/b/c/d/:e/f/:g/h",
  "/a/:b/c/d/:e/f/:g/h",
  "/:a/:b/c/d/:e/f/:g/h",
  "/a/b/:c/d/:e/f/:g/h",
  "/:a/b/:c/d/:e/f/:g/h",
  "/a/:b/:c/d/:e/f/:g/h",
  "/:a/:b/:c/d/:e/f/:g/h",
  "/a/b/c/:d/:e/f/:g/h",
  "/:a/b/c/:d/:e/f/:g/h",
  "/a/:b/c/:d/:e/f/:g/h",
  "/:a/:b/c/:d/:e/f/:g/h",
  "/a/b/:c/:d/:e/f/:g/h",
  "/:a/b/:c/:d/:e/f/:g/h",
  "/a/:b/:c/:d/:e/f/:g/h",
  "/:a/:b/:c/:d/:e/f/:g/h",
  "/a/b/c/d/e/:f/:g/h",
  "/:a/b/c/d/e/:f/:g/h",
  "/a/:b/c/d/e/:f/:g/h",
  "/:a/:b/c/d/e/:f/:g/h",
  "/a/b/:c/d/e/:f/:g/h",
  "/:a/b/:c/d/e/:f/:g/h",
  "/a/:b/:c/d/e/:f/:g/h",
  "/:a/:b/:c/d/e/:f/:g/h",
  "/a/b/c/:d/e/:f/:g/h",
  "/:a/b/c/:d/e/:f/:g/h",
  "/a/:b/c/:d/e/:f/:g/h",
  "/:a/:b/c/:d/e/:f/:g/h",
  "/a/b/:c/:d/e/:f/:g/h",
  "/:a/b/:c/:d/e/:f/:g/h",
  "/a/:b/:c/:d/e/:f/:g/h",
  "/:a/:b/:c/:d/e/:f/:g/h",
  "/a/b/c/d/:e/:f/:g/h",
  "/:a/b/c/d/:e/:f/:g/h",
  "/a/:b/c/d/:e/:f/:g/h",
  "/:a/:b/c/d/:e/:f/:g/h",
  "/a/b/:c/d/:e/:f/:g/h",
  "/:a/b/:c/d/:e/:f/:g/h",
  "/a/:b/:c/d/:e/:f/:g/h",
  "/:a/:b/:c/d/:e/:f/:g/h",
  "/a/b/c/:d/:e/:f/:g/h",
  "/:a/b/c/:d/:e/:f/:g/h",
  "/a/:b/c/:d/:e/:f/:g/h",
  "/:a/:b/c/:d/:e/:f/:g/h",
  "/a/b/:c/:d/:e/:f/:g/h",
  "/:a/b/:c/:d/:e/:f/:g/h",
  "/a/:b/:c/:d/:e/:f/:g/h",
  "/:a/:b/:c/:d/:e/:f/:g/h",
  "/:a/:b/:c/:d/:e/:f/:g/:h",
  "/a",
  "/a/b",
  "/a/b/c",
  "/a/b/c/d",
  "/a/b/c/d/e",
  "/a/b/c/d/e/f",
  "/a/b/c/d/e/f/g",
  "/a/b/c/d/e/f/g/h",
  "/*",
  "/a/*",
  "/a/b/*",
  "/a/b/c/*",
  "/a/b/c/d/*",
  "/a/b/c/d/e/*",
  "/a/b/c/d/e/f/*",
  "/a/b/c/d/e/f/g/*",
  "/a/b/c/d/e/f/g/h/*",
];

const router = new Router();
const staticReq = new Request("https://example.com/a/b/c/d/e/f/g/h");
const paramReq = new Request("https://example.com/a/b/c/d/e/f/g/x");
const wildcardReq = new Request("https://example.com/a/b/c/d/e/f/g/h/x");
const ctx = {};
const res = new Response("asdf");
for (const route of routes) {
  router.get(route, () => res);
}

Deno.bench("static route", () => {
  router.handler(staticReq, ctx);
});

Deno.bench("param route", () => {
  router.handler(paramReq, ctx);
});

Deno.bench("wildcard route", () => {
  router.handler(wildcardReq, ctx);
});
